openapi: 3.0.0
info:
  title: Otus. Домашнее задание на тему "Консистентность данных"
  version: 0.1.0
  description: >-
    Реализовать сервис заказа. 
    Сервис биллинга. 
    Сервис нотификаций.
    
    При создании пользователя, необходимо создавать аккаунт в сервисе биллинга. В
    сервисе биллинга должна быть возможность положить деньги на аккаунт и снять
    деньги.
    
    Сервис нотификаций позволяет отправить сообщение на email и
    позволяет получить список сообщений по методу API.
    
    Пользователь может создать заказ. 
    
    У заказа есть параметр - цена заказа.
    Заказ происходит в 2 этапа: 
    1) сначала снимаем деньги с пользователя с помощью сервиса биллинга
    2) отсылаем пользователю сообщение на почту с результатами оформления
    заказа. 
    
    Если биллинг подтвердил платеж, должно отослаться письмо счастья. 
    Если нет, то письмо горя.
    
    Упрощаем и считаем, что ничего плохого с
    сервисами происходить не может (они не могут падать и т.д.).
    
    Сервис нотификаций на самом деле не отправляет, а просто сохраняет в БД.
tags:
  - name: user
    description: Сервис работы с пользователем
  - name: order
    description: Сервис работы с заказами
  - name: billing
    description: Сервис работы с оплатой
  - name: notification
    description: Сервис нотификаций
paths:
  /users/register:
    post:
      tags:
        - user
      summary: Регистрация пользователя
      description: >-
        Регистрация пользователя и создание аккаунта в сервисе биллинга
      operationId: registerUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '201':
          description: Регистрация прошла успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Неправильный запрос
  /billing/putMoney:
    put:
      tags:
        - billing
      summary: Положить деньги на аккаунт
      description: Положить деньги на аккаунт
      operationId: putMoney
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                balance:
                  type: integer
              required:
                - userId
                - balance
            example:
              userId: 42
              balance: 1000
      responses:
        '200':
          description: Успешный запрос
        '400':
          description: Неправильный запрос
        '404':
          description: Такого аккаунта нет
  /billing/withdrawMoney:
    put:
      tags:
        - billing
      summary: Снять деньги с аккаунта
      description: Снять деньги с аккаунта
      operationId: withdrawMoney
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                balance:
                  type: integer
              required:
                - userId
                - balance
            example:
              userId: 42
              balance: 500
      responses:
        '200':
          description: Успешный запрос
        '400':
          description: Неправильный запрос
        '404':
          description: Такого аккаунта нет
        '500':
          description: Недостаточно денег на балансе
  /order/register:
    post:
      tags:
        - order
      summary: Регистрация заказа
      description: Метод для создания заказа
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                price:
                  type: integer
              required:
                - userId
                - price
            example:
              userId: 42
              price: 100
      responses:
        '201':
          description: Заказ успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
              example:
                orderId: 42
  /send_email:
    post:
      tags:
        - notification
      summary: Отослать email на почту
      operationId: sendEmail
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                templateId:
                  type: integer
                context:
                  type: object
              required:
                - email
                - templateId
                - context
            example:
              email: vasya@pupkin.ru
              templateId: 42
              context:
                firstName: vasya
                lastName: pupkin
                loyaltyCardNumber: 1231-1231
      responses:
        '202':
          description: Отсылка взята в работу
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
              example:
                jobId: 000123234091234
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        address:
          type: string
      required:
        - username
        - password
        - email
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            sample-user:
              summary: Обычный пользователь
              value:
                username: johndoe589
                firstName: John
                lastName: Doe
                email: bestjohn@doe.com
                phone: '+71002003040'
                password: Jsd28xzd
                address: ул Большая Филевская д 16 кв 19
      description: User object that needs to be created
      required: true
